; Программа позволяет для заданного целочисленного массива
; из 7 элементов выполнить ряд действий над его элементами
; по выбору пользователя: 
; 	3 : реверсировать массив
; 	2 : поменять местами первый и последний элементы
; 	1 : завершение работы над массивом. 
;
; Список вариантов действий выводится на экран
; и доступен пользователю для выбора,
; пока не будет выбрано завершение работы. 
; После каждого выбранного пользователем действия на экран 
; выводится исходный массив и результирующий. 
; Изначально массив описывается в сегменте данных.
;
; ****** МАССИВ ДОЛЖЕН СОСТОЯТЬ ИЗ ЧИСЕЛ от -9 до 9 ******



s_s segment stack
	db	100h dup(?)			; Резервируем память
s_s ends



d_s segment
	a	db	-1,2,3,-4,5,6,7	; Исходный массив
	
	; Строка, содержащая меню выбора действий
	str_menu	db	0ah,0dh,'Select action:',0ah,0dh,\
					'3 : Reverse array',0ah,0dh,\
					'2 : Swap begin and end element',0ah,0dh,\
					'1 : Exit',0ah,0dh,'$'
					
	; Строка, содержащая сообщение об ошибке выбора команды меню
	str_error	db	0ah,0dh,'Selected undefine command !',0ah,0dh,'$'
	
	; Строка, содержащая символы перевода строки
	endl		db	0ah,0dh,'$'
d_s ends



c_s segment
assume cs:c_s, ss:s_s, ds:d_s, es:d_s
start:

	; Инициализация сегментных регистров
	mov		ax, d_s
	mov		ds, ax
	mov		es, ax
	
	; Очистка экрана
	mov		ax, 0003h
	int		10h
	
	; Предоставление пользователю вобора действий
SELECT_ACTION:
	; Вывод меню
	mov		ah, 09h
	mov		dx, offset str_menu
	int		21h
	
	; Ожидание ввода пользователем символа, al - код введённого символа
	mov		ah, 08h
	int		21h
	
	; Выполняем действие в зависимости от введённого символа
	cmp		al, '1'
	jz		EXIT		; Если al равен '1', завершаем программу
	cmp		al, '2'
	jnz		SA2			; Если al не равен '2', идём к следущему сравнению
	; Иначе выводим исходный массив
	call	outarr
	; Меняем местами крайние элементы массива
	call	swapbe
	; Выводим изменённый массив
	call	outarr
	jmp		SELECT_ACTION	; Переход к выбору следующего действия пользователя
SA2:
	cmp		al, '3'		; Если al равен '3', реверсируем массив
	jnz		ERROR_MSG	; Если ни один из предыдущих вариантов не подошёл, введена неизвестная команда
	; Всё верно, реверсируем массив
	; Выводим исходный массив
	call	outarr
	; Ревёрс
	call	revarr
	; Выводим изменённый массив
	call	outarr
	jmp		SELECT_ACTION	; Переход к выбору следующего действия пользователя
	; При вводе любого другого символа, выводим сообщение об ошибке
ERROR_MSG:
	mov		ah, 09h
	mov		dx, offset str_error
	int		21h
	jmp		SELECT_ACTION	; Переход к выбору следующего действия пользователя
	
	; Завершение программы
EXIT:
	mov		ax, 4c00h
	int		21h
	
	
	
	;====================== Раздел подпрограмм обработки массива ======================
	
	; Процедура вывода массива на экран
	outarr proc
		
		; Вывод перевода строки
		mov		ah, 09h
		mov		dx, offset endl
		int		21h
		
		; Вывод массива
		mov		cx, 7		; Количество элементов массива и повторений цикла
		xor		si, si		; Индекс элементов массива
	NEXT_ELEM:
		mov		bl, a[si]	; Загружаем текущий элемент массива
		
		; Определяем знак элемента массива
		xor		bl, 0
		jns		POSITIV		; Если число положительно
		; Иначе число отрицательное
		neg		bl			; Меняем знак числа
		; Выводим минус
		mov		ah, 06h
		mov		dl, '-'
		int		21h
		; Выводим положительное число
	POSITIV:
		add		bl, '0'		; Преобразуем число в символ
		; Выводим число
		mov		ah, 06h
		mov		dl, bl
		int		21h
		; Выводим пробел
		mov		ah, 06h
		mov		dl, ' '
		int		21h
		
		inc		si			; Переход к следующему элементу
		loop	NEXT_ELEM
		
		; Вывод перевода строки
		mov		ah, 09h
		mov		dx, offset endl
		int		21h
		
		ret		
		
	outarr endp
	
	
	; Процедура реверсирования массива
	revarr proc
	
		; Реверс
		mov		cx, 3		; Количество повторений цикла
		xor		si, si		; Индекс левых элементов массива
		mov		di, 6		; Индекс правых элементов массива
	NEXT_ELEM1:
		
		; Обмен местами левых и правых элементов
		mov		al, a[si]
		mov		ah, a[di]
		mov		a[si], ah
		mov		a[di], al
	
		; Переход к следующемим элементам
		inc		si			
		dec		di
		loop	NEXT_ELEM1
		
		ret
		
	revarr endp

	
	; Процедура обмена местами начального и конечных элементов массива
	swapbe proc
	
		; Обмен местами крайних элементов
		mov		al, a[0]
		mov		ah, a[6]
		mov		a[0], ah
		mov		a[6], al
		
		ret
		
	swapbe endp
	
	
	
c_s ends
end start